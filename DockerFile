# Stage 1: Build C++ backend
FROM --platform=linux/arm64 debian:bullseye-slim AS cpp-builder

# Install build essentials, CMake, Boost, nlohmann/json, and libcurl
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
    build-essential \
    gcc \
    g++ \
    cmake \
    libboost-all-dev \
    nlohmann-json3-dev \
    libcurl4-openssl-dev \
    --no-install-recommends && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy C++ source files and CMakeLists.txt
COPY CMakeLists.txt .
COPY backend ./backend

# Create build directory, configure and build the project
RUN mkdir build && cd build && \
    cmake .. \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_CXX_FLAGS="-O3 -march=native -mtune=native -flto -ffast-math" && \
    cmake --build . --config Release --target Amtal -j$(nproc)

# Stage 2: Build React frontend
FROM --platform=linux/arm64 node:16-bullseye-slim AS react-builder

WORKDIR /app/frontend

# Copy package.json and package-lock.json
COPY frontend/package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the frontend code
COPY frontend .

# Build the React app
RUN npm run build

# Stage 3: Final image
FROM --platform=linux/arm64 debian:bullseye-slim

# Install runtime dependencies
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
    libstdc++6 \
    libboost-system1.74.0 \
    libboost-thread1.74.0 \
    nginx \
    --no-install-recommends && \
    rm -rf /var/lib/apt/lists/* \ 
    libcurl4-openssl-dev

# Copy C++ backend
WORKDIR /app
COPY --from=cpp-builder /app/build/bin/Amtal .

# Copy React frontend
COPY --from=react-builder /app/frontend/build /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Expose ports
EXPOSE 80 8080

# Start both backend and nginx
CMD service nginx start && ./Amtal